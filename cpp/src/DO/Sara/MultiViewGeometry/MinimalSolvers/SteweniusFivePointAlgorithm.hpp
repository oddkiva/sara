// ========================================================================== //
// This file is part of Sara, a basic set of libraries in C++ for computer
// vision.
//
// Copyright (C) 2024 David Ok <david.ok8@gmail.com>
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License v. 2.0. If a copy of the MPL was not distributed with this file,
// you can obtain one at http://mozilla.org/MPL/2.0/.
// ========================================================================== //

#pragma once

#include <DO/Sara/Defines.hpp>

#include <DO/Sara/MultiViewGeometry/Geometry/EssentialMatrix.hpp>

#include <array>


namespace DO::Sara {

  //! @ingroup MultiViewGeometry
  //! @defgroup MinimalSolvers Minimal Solvers
  //! @{

  //! @brief Stewenius 5-point solver for the estimation of the essential
  //! matrix.
  //! The implementation is optimized as each coefficient of the constraint
  //! polynomial system is a formula generated by using a CAS, which is in our
  //! case SymPy.
  struct SteweniusFivePointAlgorithm
  {
    using model_type = EssentialMatrix;
    using matrix_type = Eigen::Matrix<double, 3, 5>;
    using matrix_view_type = Eigen::Map<const matrix_type>;
    using data_point_type = std::array<TensorView_<double, 2>, 2>;

    static constexpr auto num_points = 5;
    static constexpr auto num_models = 10;

    DO_SARA_EXPORT
    auto extract_null_space(const Matrix<double, 3, 5>& p_left,
                            const Matrix<double, 3, 5>& p_right) const
        -> Eigen::Matrix<double, 9, 4>;

    DO_SARA_EXPORT
    auto build_essential_matrix_constraints(
        const Eigen::Matrix<double, 9, 4>& E_bases) const
        -> Eigen::Matrix<double, 10, 20>;

    DO_SARA_EXPORT
    auto solve_essential_matrix_constraints(
        const Eigen::Matrix<double, 9, 4>& E_bases,
        const Eigen::Matrix<double, 10, 20>& M) const
        -> std::vector<EssentialMatrix>;

    DO_SARA_EXPORT
    auto operator()(const Matrix<double, 3, 5>& left,
                    const Matrix<double, 3, 5>& right) const
        -> std::vector<EssentialMatrix>;

    auto
    operator()(const data_point_type& X) const -> std::vector<EssentialMatrix>
    {
      const matrix_type left = X[0].colmajor_view().matrix();
      const matrix_type right = X[1].colmajor_view().matrix();
      return this->operator()(left, right);
    }
  };

  //! @}

}  // namespace DO::Sara
