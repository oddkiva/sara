image: nvidia/cudagl:10.1-runtime-ubuntu18.04

cache:
  paths:
    - .apt/
    - ccache/

before_script:
  # Configure APT caching
  - echo $CI_PROJECT_DIR
  - export APT_DIR=$CI_PROJECT_DIR/.apt
  - export APT_STATE_LISTS=$APT_DIR/lists
  - export APT_CACHE_ARCHIVES=$APT_DIR/archives

  - printf "dir::state::lists    ${APT_STATE_LISTS};\ndir::cache::archives    ${APT_CACHE_ARCHIVES};\n" > /etc/apt/apt.conf
  - mkdir -p "${APT_STATE_LISTS}/partial" && mkdir -p "${APT_CACHE_ARCHIVES}/partial"

  # Setup ccache to speed up builds.
  - mkdir -p ccache
  - export CCACHE_BASEDIR=${PWD}
  - export CCACHE_DIR=${PWD}/ccache

  # Do this first.
  - apt-get update -y -qq

  # Install the latest CMake please.
  - apt-get install -y -qq
      apt-transport-https
      ca-certificates
      gnupg
      software-properties-common
      wget

  # Now add the additional APT repositories:
  #
  # CMake.
  - wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
  - apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
  # Vulkan SDK.
  - wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | apt-key add -
  - wget -qO /etc/apt/sources.list.d/lunarg-vulkan-bionic.list http://packages.lunarg.com/vulkan/lunarg-vulkan-bionic.list
  # Update the packages list again.
  - apt-get update -y -qq

  # For the documentation.
  - apt-get install -y -qq
      doxygen
      graphviz

  # All the packages to compile the C++ codebase.
  - apt-get install -y -qq
      build-essential
      ccache
      cmake
      cppcheck
      git
      lcov
      libboost-all-dev
      libhdf5-dev
      libjpeg-dev
      libpng-dev
      libtiff5-dev
      libavcodec-dev
      libavformat-dev
      libavutil-dev
      libswscale-dev
      libglew-dev
      libglfw3-dev
      ocl-icd-opencl-dev
      opencl-headers
      libpocl-dev
      libceres-dev
      qtbase5-dev
      vulkan-sdk

  # Install the GStreamer SDK.
  - apt-get install -y -qq
    libgstreamer1.0-0
    gstreamer1.0-plugins-base
    gstreamer1.0-plugins-good
    gstreamer1.0-plugins-bad
    gstreamer1.0-plugins-ugly
    gstreamer1.0-libav
    gstreamer1.0-doc
    gstreamer1.0-tools
    gstreamer1.0-x
    gstreamer1.0-alsa
    gstreamer1.0-gl
    gstreamer1.0-gtk3
    gstreamer1.0-qt5
    gstreamer1.0-pulseaudio

  # Python dependencies (TODO).
  - apt-get install -y -qq python3-dev

  # Coveralls-lcov
  - apt-get install -y -qq rubygems
  - gem install bundler
  - bundle install

  # Build CLBlast.
  - ./scripts/install_clblast.sh

  # Setup for GUI testing.
  - apt-get install -y xvfb
  - Xvfb :1 -noreset 1>/dev/null 2>&1 &
  - export DISPLAY=:1

# cppcheck:
#   stage: build
#   script:
#     - cppcheck --enable=all --inconclusive --verbose cpp/src

build:
  stage: build
  script:
    # Build Sara.
    - mkdir build
    - cd build
    - cmake ..
        -DCMAKE_BUILD_TYPE:STRING=Debug
        -DSARA_BUILD_SHARED_LIBS:BOOL=ON
        -DSARA_BUILD_VIDEOIO:BOOL=ON
        -DSARA_BUILD_SAMPLES:BOOL=ON
        -DSARA_BUILD_TESTS:BOOL=ON
    - make -j$(nproc)
    # Create deb package.
    - make package
    # Run tests.
    - DISPLAY=:1 ctest
        -j$(nproc)
        --output-on-failure
        --exclude-regex "test_graphics_*|test_visualization_*|test_core_ipc_cond1|test_videoio_video_writer|shakti_test_*"
    # TODO: make -j$(nproc) coverage.
    - cd ..
    - lcov --compat-libtool --directory build --base-directory=cpp/src --capture --output-file=coverage.info
    - lcov --remove coverage.info '/usr/*' --output-file coverage.info
    - lcov --remove coverage.info '/tmp/*' --output-file coverage.info
    - lcov --remove coverage.info '/builds/DO-CV/sara/cpp/third-party/*' --output-file coverage.info
    - lcov --remove coverage.info '/builds/DO-CV/sara/cpp/test/*' --output-file coverage.info
    - lcov --remove coverage.info '/builds/DO-CV/sara/cpp/examples/*' --output-file coverage.info
    - lcov --remove coverage.info '/builds/DO-CV/sara/build/*' --output-file coverage.info
    - coveralls-lcov coverage.info --repo-token=$(cat .coveralls.gitlab.yml)

pages:
  stage: deploy
  script:
    # Configure the documentation build.
    - mkdir build
    - cmake -DSARA_BUILD_SHARED_LIBS:BOOL=ON ..
    - cd build
    - make -j$(nproc) doc
    # Move the generated documentation in the right place.
    - mv doc/html/ ../public/
  artifacts:
    paths:
    - public
